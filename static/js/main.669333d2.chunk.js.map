{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","index","_","SearchBox","placeholder","handleChange","type","onChange","App","event","setState","searchFilter","target","value","state","fetch","then","response","json","users","filteredResult","this","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAEaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACG,qBAAKC,IAAI,MAAMC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAClB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJhBC,G,MAAW,SAACR,GACrB,OAAO,qBAAKC,UAAU,YAAf,SAEHD,EAAMS,SAASC,KAAI,SAACN,EAASO,EAAOC,GACnC,OAAO,cAAC,EAAD,CAAuBR,QAASA,GAArBA,EAAQC,WCLtBQ,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,uBAAOd,UAAU,SAASe,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCoCrEG,G,wDAjCb,aAAc,IAAD,8BACX,gBAaFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,aAAcF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACXf,SAAU,GACVY,aAAc,IAJL,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CAA8CC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAC1F,EAAKT,SAAS,CAACX,SAAUoB,S,oBAQ7B,WAAS,IAAD,OACAC,EAAiBC,KAAKP,MAAMf,SAASuB,QAAO,SAAC5B,GAChD,OAAOA,EAAQE,KAAK2B,cAAcC,SAAS,EAAKV,MAAMH,aAAaY,kBAEtE,OACE,sBAAKhC,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWa,YAAY,kBAAkBC,aAAcgB,KAAKhB,eAC5D,cAAC,EAAD,CAAUN,SAAUqB,W,GA5BVK,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.669333d2.chunk.js","sourcesContent":["import './card.styles.css'\r\n\r\nexport const Card = props => {\r\n    return (\r\n        <div className='card-container'>\r\n           <img alt=\"img\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n           <h2>{props.monster.name}</h2>\r\n           <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n}","import {Card} from '../card/card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = (props) => {\r\n    return <div className=\"card-list\">\r\n    {\r\n        props.monsters.map((monster, index, _) => {\r\n         return <Card key={monster.id} monster={monster}/>\r\n        })\r\n    }\r\n    </div>\r\n}","import './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return (\r\n        <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n  )\r\n}","import {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component.jsx'\nimport { SearchBox } from \"./components/search-box/search-box.component.jsx\";\nimport './App.css';\n\nclass App extends Component {\n  \n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchFilter: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users').then( response => response.json()).then(users => {\n      this.setState({monsters: users})\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({searchFilter: event.target.value});\n  }\n\n  render(){\n    const filteredResult = this.state.monsters.filter((monster)=>{\n       return monster.name.toLowerCase().includes(this.state.searchFilter.toLowerCase())\n    })\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox placeholder=\"Search monsters\" handleChange={this.handleChange}/>\n        <CardList monsters={filteredResult}/>        \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}